// This file is generated by rust-protobuf 2.0.6. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct FundraisingSummary {
    // message fields
    pub link: ::std::string::String,
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub verified: bool,
    pub contributors: u32,
    pub date: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl FundraisingSummary {
    pub fn new() -> FundraisingSummary {
        ::std::default::Default::default()
    }

    // string link = 1;

    pub fn clear_link(&mut self) {
        self.link.clear();
    }

    // Param is passed by value, moved
    pub fn set_link(&mut self, v: ::std::string::String) {
        self.link = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_link(&mut self) -> &mut ::std::string::String {
        &mut self.link
    }

    // Take field
    pub fn take_link(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.link, ::std::string::String::new())
    }

    pub fn get_link(&self) -> &str {
        &self.link
    }

    // string title = 2;

    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    pub fn get_title(&self) -> &str {
        &self.title
    }

    // string description = 3;

    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    pub fn get_description(&self) -> &str {
        &self.description
    }

    // bool verified = 4;

    pub fn clear_verified(&mut self) {
        self.verified = false;
    }

    // Param is passed by value, moved
    pub fn set_verified(&mut self, v: bool) {
        self.verified = v;
    }

    pub fn get_verified(&self) -> bool {
        self.verified
    }

    // uint32 contributors = 5;

    pub fn clear_contributors(&mut self) {
        self.contributors = 0;
    }

    // Param is passed by value, moved
    pub fn set_contributors(&mut self, v: u32) {
        self.contributors = v;
    }

    pub fn get_contributors(&self) -> u32 {
        self.contributors
    }

    // string date = 6;

    pub fn clear_date(&mut self) {
        self.date.clear();
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: ::std::string::String) {
        self.date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_date(&mut self) -> &mut ::std::string::String {
        &mut self.date
    }

    // Take field
    pub fn take_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.date, ::std::string::String::new())
    }

    pub fn get_date(&self) -> &str {
        &self.date
    }
}

impl ::protobuf::Message for FundraisingSummary {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.link)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.verified = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.contributors = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.date)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.link.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.link);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if self.verified != false {
            my_size += 2;
        }
        if self.contributors != 0 {
            my_size += ::protobuf::rt::value_size(5, self.contributors, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.date.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.date);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.link.is_empty() {
            os.write_string(1, &self.link)?;
        }
        if !self.title.is_empty() {
            os.write_string(2, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if self.verified != false {
            os.write_bool(4, self.verified)?;
        }
        if self.contributors != 0 {
            os.write_uint32(5, self.contributors)?;
        }
        if !self.date.is_empty() {
            os.write_string(6, &self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FundraisingSummary {
        FundraisingSummary::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "link",
                    |m: &FundraisingSummary| { &m.link },
                    |m: &mut FundraisingSummary| { &mut m.link },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "title",
                    |m: &FundraisingSummary| { &m.title },
                    |m: &mut FundraisingSummary| { &mut m.title },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description",
                    |m: &FundraisingSummary| { &m.description },
                    |m: &mut FundraisingSummary| { &mut m.description },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "verified",
                    |m: &FundraisingSummary| { &m.verified },
                    |m: &mut FundraisingSummary| { &mut m.verified },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "contributors",
                    |m: &FundraisingSummary| { &m.contributors },
                    |m: &mut FundraisingSummary| { &mut m.contributors },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "date",
                    |m: &FundraisingSummary| { &m.date },
                    |m: &mut FundraisingSummary| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FundraisingSummary>(
                    "FundraisingSummary",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FundraisingSummary {
        static mut instance: ::protobuf::lazy::Lazy<FundraisingSummary> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FundraisingSummary,
        };
        unsafe {
            instance.get(FundraisingSummary::new)
        }
    }
}

impl ::protobuf::Clear for FundraisingSummary {
    fn clear(&mut self) {
        self.clear_link();
        self.clear_title();
        self.clear_description();
        self.clear_verified();
        self.clear_contributors();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FundraisingSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FundraisingSummary {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FundraisingDetails {
    // message fields
    pub link: ::std::string::String,
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub verified: bool,
    pub fundraiser: ::std::string::String,
    pub tags: ::protobuf::RepeatedField<FundraisingDetails_Label>,
    pub date: ::std::string::String,
    // message oneof groups
    pub optional_contributors: ::std::option::Option<FundraisingDetails_oneof_optional_contributors>,
    pub optional_collected: ::std::option::Option<FundraisingDetails_oneof_optional_collected>,
    pub optional_delay: ::std::option::Option<FundraisingDetails_oneof_optional_delay>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum FundraisingDetails_oneof_optional_contributors {
    contributors(u32),
}

#[derive(Clone,PartialEq)]
pub enum FundraisingDetails_oneof_optional_collected {
    collected(::std::string::String),
}

#[derive(Clone,PartialEq)]
pub enum FundraisingDetails_oneof_optional_delay {
    delay(u32),
}

impl FundraisingDetails {
    pub fn new() -> FundraisingDetails {
        ::std::default::Default::default()
    }

    // string link = 10;

    pub fn clear_link(&mut self) {
        self.link.clear();
    }

    // Param is passed by value, moved
    pub fn set_link(&mut self, v: ::std::string::String) {
        self.link = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_link(&mut self) -> &mut ::std::string::String {
        &mut self.link
    }

    // Take field
    pub fn take_link(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.link, ::std::string::String::new())
    }

    pub fn get_link(&self) -> &str {
        &self.link
    }

    // string title = 1;

    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    pub fn get_title(&self) -> &str {
        &self.title
    }

    // string description = 2;

    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    pub fn get_description(&self) -> &str {
        &self.description
    }

    // bool verified = 3;

    pub fn clear_verified(&mut self) {
        self.verified = false;
    }

    // Param is passed by value, moved
    pub fn set_verified(&mut self, v: bool) {
        self.verified = v;
    }

    pub fn get_verified(&self) -> bool {
        self.verified
    }

    // uint32 contributors = 4;

    pub fn clear_contributors(&mut self) {
        self.optional_contributors = ::std::option::Option::None;
    }

    pub fn has_contributors(&self) -> bool {
        match self.optional_contributors {
            ::std::option::Option::Some(FundraisingDetails_oneof_optional_contributors::contributors(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_contributors(&mut self, v: u32) {
        self.optional_contributors = ::std::option::Option::Some(FundraisingDetails_oneof_optional_contributors::contributors(v))
    }

    pub fn get_contributors(&self) -> u32 {
        match self.optional_contributors {
            ::std::option::Option::Some(FundraisingDetails_oneof_optional_contributors::contributors(v)) => v,
            _ => 0,
        }
    }

    // string collected = 5;

    pub fn clear_collected(&mut self) {
        self.optional_collected = ::std::option::Option::None;
    }

    pub fn has_collected(&self) -> bool {
        match self.optional_collected {
            ::std::option::Option::Some(FundraisingDetails_oneof_optional_collected::collected(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_collected(&mut self, v: ::std::string::String) {
        self.optional_collected = ::std::option::Option::Some(FundraisingDetails_oneof_optional_collected::collected(v))
    }

    // Mutable pointer to the field.
    pub fn mut_collected(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(FundraisingDetails_oneof_optional_collected::collected(_)) = self.optional_collected {
        } else {
            self.optional_collected = ::std::option::Option::Some(FundraisingDetails_oneof_optional_collected::collected(::std::string::String::new()));
        }
        match self.optional_collected {
            ::std::option::Option::Some(FundraisingDetails_oneof_optional_collected::collected(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_collected(&mut self) -> ::std::string::String {
        if self.has_collected() {
            match self.optional_collected.take() {
                ::std::option::Option::Some(FundraisingDetails_oneof_optional_collected::collected(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    pub fn get_collected(&self) -> &str {
        match self.optional_collected {
            ::std::option::Option::Some(FundraisingDetails_oneof_optional_collected::collected(ref v)) => v,
            _ => "",
        }
    }

    // string fundraiser = 6;

    pub fn clear_fundraiser(&mut self) {
        self.fundraiser.clear();
    }

    // Param is passed by value, moved
    pub fn set_fundraiser(&mut self, v: ::std::string::String) {
        self.fundraiser = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fundraiser(&mut self) -> &mut ::std::string::String {
        &mut self.fundraiser
    }

    // Take field
    pub fn take_fundraiser(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fundraiser, ::std::string::String::new())
    }

    pub fn get_fundraiser(&self) -> &str {
        &self.fundraiser
    }

    // uint32 delay = 7;

    pub fn clear_delay(&mut self) {
        self.optional_delay = ::std::option::Option::None;
    }

    pub fn has_delay(&self) -> bool {
        match self.optional_delay {
            ::std::option::Option::Some(FundraisingDetails_oneof_optional_delay::delay(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delay(&mut self, v: u32) {
        self.optional_delay = ::std::option::Option::Some(FundraisingDetails_oneof_optional_delay::delay(v))
    }

    pub fn get_delay(&self) -> u32 {
        match self.optional_delay {
            ::std::option::Option::Some(FundraisingDetails_oneof_optional_delay::delay(v)) => v,
            _ => 0,
        }
    }

    // repeated .FundraisingDetails.Label tags = 8;

    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::protobuf::RepeatedField<FundraisingDetails_Label>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::protobuf::RepeatedField<FundraisingDetails_Label> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::protobuf::RepeatedField<FundraisingDetails_Label> {
        ::std::mem::replace(&mut self.tags, ::protobuf::RepeatedField::new())
    }

    pub fn get_tags(&self) -> &[FundraisingDetails_Label] {
        &self.tags
    }

    // string date = 9;

    pub fn clear_date(&mut self) {
        self.date.clear();
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: ::std::string::String) {
        self.date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_date(&mut self) -> &mut ::std::string::String {
        &mut self.date
    }

    // Take field
    pub fn take_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.date, ::std::string::String::new())
    }

    pub fn get_date(&self) -> &str {
        &self.date
    }
}

impl ::protobuf::Message for FundraisingDetails {
    fn is_initialized(&self) -> bool {
        for v in &self.tags {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.link)?;
                },
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.verified = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.optional_contributors = ::std::option::Option::Some(FundraisingDetails_oneof_optional_contributors::contributors(is.read_uint32()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.optional_collected = ::std::option::Option::Some(FundraisingDetails_oneof_optional_collected::collected(is.read_string()?));
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fundraiser)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.optional_delay = ::std::option::Option::Some(FundraisingDetails_oneof_optional_delay::delay(is.read_uint32()?));
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tags)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.date)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.link.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.link);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if self.verified != false {
            my_size += 2;
        }
        if !self.fundraiser.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.fundraiser);
        }
        for value in &self.tags {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.date.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.date);
        }
        if let ::std::option::Option::Some(ref v) = self.optional_contributors {
            match v {
                &FundraisingDetails_oneof_optional_contributors::contributors(v) => {
                    my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.optional_collected {
            match v {
                &FundraisingDetails_oneof_optional_collected::collected(ref v) => {
                    my_size += ::protobuf::rt::string_size(5, &v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.optional_delay {
            match v {
                &FundraisingDetails_oneof_optional_delay::delay(v) => {
                    my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.link.is_empty() {
            os.write_string(10, &self.link)?;
        }
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if self.verified != false {
            os.write_bool(3, self.verified)?;
        }
        if !self.fundraiser.is_empty() {
            os.write_string(6, &self.fundraiser)?;
        }
        for v in &self.tags {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.date.is_empty() {
            os.write_string(9, &self.date)?;
        }
        if let ::std::option::Option::Some(ref v) = self.optional_contributors {
            match v {
                &FundraisingDetails_oneof_optional_contributors::contributors(v) => {
                    os.write_uint32(4, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.optional_collected {
            match v {
                &FundraisingDetails_oneof_optional_collected::collected(ref v) => {
                    os.write_string(5, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.optional_delay {
            match v {
                &FundraisingDetails_oneof_optional_delay::delay(v) => {
                    os.write_uint32(7, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FundraisingDetails {
        FundraisingDetails::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "link",
                    |m: &FundraisingDetails| { &m.link },
                    |m: &mut FundraisingDetails| { &mut m.link },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "title",
                    |m: &FundraisingDetails| { &m.title },
                    |m: &mut FundraisingDetails| { &mut m.title },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description",
                    |m: &FundraisingDetails| { &m.description },
                    |m: &mut FundraisingDetails| { &mut m.description },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "verified",
                    |m: &FundraisingDetails| { &m.verified },
                    |m: &mut FundraisingDetails| { &mut m.verified },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor::<_>(
                    "contributors",
                    FundraisingDetails::has_contributors,
                    FundraisingDetails::get_contributors,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "collected",
                    FundraisingDetails::has_collected,
                    FundraisingDetails::get_collected,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "fundraiser",
                    |m: &FundraisingDetails| { &m.fundraiser },
                    |m: &mut FundraisingDetails| { &mut m.fundraiser },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor::<_>(
                    "delay",
                    FundraisingDetails::has_delay,
                    FundraisingDetails::get_delay,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FundraisingDetails_Label>>(
                    "tags",
                    |m: &FundraisingDetails| { &m.tags },
                    |m: &mut FundraisingDetails| { &mut m.tags },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "date",
                    |m: &FundraisingDetails| { &m.date },
                    |m: &mut FundraisingDetails| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FundraisingDetails>(
                    "FundraisingDetails",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FundraisingDetails {
        static mut instance: ::protobuf::lazy::Lazy<FundraisingDetails> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FundraisingDetails,
        };
        unsafe {
            instance.get(FundraisingDetails::new)
        }
    }
}

impl ::protobuf::Clear for FundraisingDetails {
    fn clear(&mut self) {
        self.clear_link();
        self.clear_title();
        self.clear_description();
        self.clear_verified();
        self.clear_contributors();
        self.clear_collected();
        self.clear_fundraiser();
        self.clear_delay();
        self.clear_tags();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FundraisingDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FundraisingDetails {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FundraisingDetails_Label {
    // message fields
    pub label_type: FundraisingDetails_Label_LabelType,
    pub name: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl FundraisingDetails_Label {
    pub fn new() -> FundraisingDetails_Label {
        ::std::default::Default::default()
    }

    // .FundraisingDetails.Label.LabelType label_type = 1;

    pub fn clear_label_type(&mut self) {
        self.label_type = FundraisingDetails_Label_LabelType::LOCATION;
    }

    // Param is passed by value, moved
    pub fn set_label_type(&mut self, v: FundraisingDetails_Label_LabelType) {
        self.label_type = v;
    }

    pub fn get_label_type(&self) -> FundraisingDetails_Label_LabelType {
        self.label_type
    }

    // string name = 2;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }
}

impl ::protobuf::Message for FundraisingDetails_Label {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.label_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.label_type != FundraisingDetails_Label_LabelType::LOCATION {
            my_size += ::protobuf::rt::enum_size(1, self.label_type);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.label_type != FundraisingDetails_Label_LabelType::LOCATION {
            os.write_enum(1, self.label_type.value())?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FundraisingDetails_Label {
        FundraisingDetails_Label::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FundraisingDetails_Label_LabelType>>(
                    "label_type",
                    |m: &FundraisingDetails_Label| { &m.label_type },
                    |m: &mut FundraisingDetails_Label| { &mut m.label_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &FundraisingDetails_Label| { &m.name },
                    |m: &mut FundraisingDetails_Label| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FundraisingDetails_Label>(
                    "FundraisingDetails_Label",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FundraisingDetails_Label {
        static mut instance: ::protobuf::lazy::Lazy<FundraisingDetails_Label> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FundraisingDetails_Label,
        };
        unsafe {
            instance.get(FundraisingDetails_Label::new)
        }
    }
}

impl ::protobuf::Clear for FundraisingDetails_Label {
    fn clear(&mut self) {
        self.clear_label_type();
        self.clear_name();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FundraisingDetails_Label {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FundraisingDetails_Label {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FundraisingDetails_Label_LabelType {
    LOCATION = 0,
    EVENT_TYPE = 1,
}

impl ::protobuf::ProtobufEnum for FundraisingDetails_Label_LabelType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FundraisingDetails_Label_LabelType> {
        match value {
            0 => ::std::option::Option::Some(FundraisingDetails_Label_LabelType::LOCATION),
            1 => ::std::option::Option::Some(FundraisingDetails_Label_LabelType::EVENT_TYPE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FundraisingDetails_Label_LabelType] = &[
            FundraisingDetails_Label_LabelType::LOCATION,
            FundraisingDetails_Label_LabelType::EVENT_TYPE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("FundraisingDetails_Label_LabelType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for FundraisingDetails_Label_LabelType {
}

impl ::std::default::Default for FundraisingDetails_Label_LabelType {
    fn default() -> Self {
        FundraisingDetails_Label_LabelType::LOCATION
    }
}

impl ::protobuf::reflect::ProtobufValue for FundraisingDetails_Label_LabelType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FundraisingEval {
    // message fields
    pub link: ::std::string::String,
    pub eval: ::protobuf::RepeatedField<FundraisingEval_Eval>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl FundraisingEval {
    pub fn new() -> FundraisingEval {
        ::std::default::Default::default()
    }

    // string link = 1;

    pub fn clear_link(&mut self) {
        self.link.clear();
    }

    // Param is passed by value, moved
    pub fn set_link(&mut self, v: ::std::string::String) {
        self.link = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_link(&mut self) -> &mut ::std::string::String {
        &mut self.link
    }

    // Take field
    pub fn take_link(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.link, ::std::string::String::new())
    }

    pub fn get_link(&self) -> &str {
        &self.link
    }

    // repeated .FundraisingEval.Eval eval = 2;

    pub fn clear_eval(&mut self) {
        self.eval.clear();
    }

    // Param is passed by value, moved
    pub fn set_eval(&mut self, v: ::protobuf::RepeatedField<FundraisingEval_Eval>) {
        self.eval = v;
    }

    // Mutable pointer to the field.
    pub fn mut_eval(&mut self) -> &mut ::protobuf::RepeatedField<FundraisingEval_Eval> {
        &mut self.eval
    }

    // Take field
    pub fn take_eval(&mut self) -> ::protobuf::RepeatedField<FundraisingEval_Eval> {
        ::std::mem::replace(&mut self.eval, ::protobuf::RepeatedField::new())
    }

    pub fn get_eval(&self) -> &[FundraisingEval_Eval] {
        &self.eval
    }
}

impl ::protobuf::Message for FundraisingEval {
    fn is_initialized(&self) -> bool {
        for v in &self.eval {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.link)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.eval)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.link.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.link);
        }
        for value in &self.eval {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.link.is_empty() {
            os.write_string(1, &self.link)?;
        }
        for v in &self.eval {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FundraisingEval {
        FundraisingEval::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "link",
                    |m: &FundraisingEval| { &m.link },
                    |m: &mut FundraisingEval| { &mut m.link },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FundraisingEval_Eval>>(
                    "eval",
                    |m: &FundraisingEval| { &m.eval },
                    |m: &mut FundraisingEval| { &mut m.eval },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FundraisingEval>(
                    "FundraisingEval",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FundraisingEval {
        static mut instance: ::protobuf::lazy::Lazy<FundraisingEval> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FundraisingEval,
        };
        unsafe {
            instance.get(FundraisingEval::new)
        }
    }
}

impl ::protobuf::Clear for FundraisingEval {
    fn clear(&mut self) {
        self.clear_link();
        self.clear_eval();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FundraisingEval {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FundraisingEval {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FundraisingEval_Eval {
    // message fields
    pub tags: ::protobuf::RepeatedField<::std::string::String>,
    pub date: ::std::string::String,
    pub source: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl FundraisingEval_Eval {
    pub fn new() -> FundraisingEval_Eval {
        ::std::default::Default::default()
    }

    // repeated string tags = 1;

    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.tags, ::protobuf::RepeatedField::new())
    }

    pub fn get_tags(&self) -> &[::std::string::String] {
        &self.tags
    }

    // string date = 2;

    pub fn clear_date(&mut self) {
        self.date.clear();
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: ::std::string::String) {
        self.date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_date(&mut self) -> &mut ::std::string::String {
        &mut self.date
    }

    // Take field
    pub fn take_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.date, ::std::string::String::new())
    }

    pub fn get_date(&self) -> &str {
        &self.date
    }

    // string source = 3;

    pub fn clear_source(&mut self) {
        self.source.clear();
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: ::std::string::String) {
        self.source = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source(&mut self) -> &mut ::std::string::String {
        &mut self.source
    }

    // Take field
    pub fn take_source(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.source, ::std::string::String::new())
    }

    pub fn get_source(&self) -> &str {
        &self.source
    }
}

impl ::protobuf::Message for FundraisingEval_Eval {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.tags)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.date)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.source)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tags {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if !self.date.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.date);
        }
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.source);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tags {
            os.write_string(1, &v)?;
        };
        if !self.date.is_empty() {
            os.write_string(2, &self.date)?;
        }
        if !self.source.is_empty() {
            os.write_string(3, &self.source)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FundraisingEval_Eval {
        FundraisingEval_Eval::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "tags",
                    |m: &FundraisingEval_Eval| { &m.tags },
                    |m: &mut FundraisingEval_Eval| { &mut m.tags },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "date",
                    |m: &FundraisingEval_Eval| { &m.date },
                    |m: &mut FundraisingEval_Eval| { &mut m.date },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "source",
                    |m: &FundraisingEval_Eval| { &m.source },
                    |m: &mut FundraisingEval_Eval| { &mut m.source },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FundraisingEval_Eval>(
                    "FundraisingEval_Eval",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FundraisingEval_Eval {
        static mut instance: ::protobuf::lazy::Lazy<FundraisingEval_Eval> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FundraisingEval_Eval,
        };
        unsafe {
            instance.get(FundraisingEval_Eval::new)
        }
    }
}

impl ::protobuf::Clear for FundraisingEval_Eval {
    fn clear(&mut self) {
        self.clear_tags();
        self.clear_date();
        self.clear_source();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FundraisingEval_Eval {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FundraisingEval_Eval {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11fundraising.proto\"\xb4\x01\n\x12FundraisingSummary\x12\x12\n\x04l\
    ink\x18\x01\x20\x01(\tR\x04link\x12\x14\n\x05title\x18\x02\x20\x01(\tR\
    \x05title\x12\x20\n\x0bdescription\x18\x03\x20\x01(\tR\x0bdescription\
    \x12\x1a\n\x08verified\x18\x04\x20\x01(\x08R\x08verified\x12\"\n\x0ccont\
    ributors\x18\x05\x20\x01(\rR\x0ccontributors\x12\x12\n\x04date\x18\x06\
    \x20\x01(\tR\x04date\"\x8b\x04\n\x12FundraisingDetails\x12\x12\n\x04link\
    \x18\n\x20\x01(\tR\x04link\x12\x14\n\x05title\x18\x01\x20\x01(\tR\x05tit\
    le\x12\x20\n\x0bdescription\x18\x02\x20\x01(\tR\x0bdescription\x12\x1a\n\
    \x08verified\x18\x03\x20\x01(\x08R\x08verified\x12$\n\x0ccontributors\
    \x18\x04\x20\x01(\rH\0R\x0ccontributors\x12\x1e\n\tcollected\x18\x05\x20\
    \x01(\tH\x01R\tcollected\x12\x1e\n\nfundraiser\x18\x06\x20\x01(\tR\nfund\
    raiser\x12\x16\n\x05delay\x18\x07\x20\x01(\rH\x02R\x05delay\x12-\n\x04ta\
    gs\x18\x08\x20\x03(\x0b2\x19.FundraisingDetails.LabelR\x04tags\x12\x12\n\
    \x04date\x18\t\x20\x01(\tR\x04date\x1a\x8a\x01\n\x05Label\x12B\n\nlabel_\
    type\x18\x01\x20\x01(\x0e2#.FundraisingDetails.Label.LabelTypeR\tlabelTy\
    pe\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\")\n\tLabelType\x12\x0c\
    \n\x08LOCATION\x10\0\x12\x0e\n\nEVENT_TYPE\x10\x01B\x17\n\x15optional_co\
    ntributorsB\x14\n\x12optional_collectedB\x10\n\x0eoptional_delay\"\x98\
    \x01\n\x0fFundraisingEval\x12\x12\n\x04link\x18\x01\x20\x01(\tR\x04link\
    \x12)\n\x04eval\x18\x02\x20\x03(\x0b2\x15.FundraisingEval.EvalR\x04eval\
    \x1aF\n\x04Eval\x12\x12\n\x04tags\x18\x01\x20\x03(\tR\x04tags\x12\x12\n\
    \x04date\x18\x02\x20\x01(\tR\x04date\x12\x16\n\x06source\x18\x03\x20\x01\
    (\tR\x06sourceb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
